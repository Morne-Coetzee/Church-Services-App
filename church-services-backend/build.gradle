buildscript {
    ext {
        grailsVersion = '4.1.3'
        groovyVersion = '3.0.11'
        springBootVersion = '2.2.13.RELEASE'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.maven.apache.org/maven2" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://repo.grails.org/grails/plugins" }
        maven { url "https://jitpack.io" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:7.0.5"
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.0"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
        classpath "org.flywaydb:flyway-gradle-plugin:7.15.0" // Updated version
    }
}

plugins {
    id 'org.springframework.boot' version '2.2.13.RELEASE'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'groovy'
    id 'java'
    id 'war'
    id 'org.flywaydb.flyway' version '7.15.0' // Updated version
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.maven.apache.org/maven2" }
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://repo.grails.org/grails/plugins" }
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-logging:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-autoconfigure:$springBootVersion"
    implementation "org.grails:grails-core:$grailsVersion"
    implementation "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-tomcat:$springBootVersion"
    implementation "org.grails:grails-web-boot:$grailsVersion"
    implementation "org.grails:grails-logging:$grailsVersion"
    implementation "org.grails:grails-plugin-rest:$grailsVersion"
    implementation "org.grails:grails-plugin-databinding:$grailsVersion"
    implementation "org.grails:grails-plugin-i18n:$grailsVersion"
    implementation "org.grails:grails-plugin-services:$grailsVersion"
    implementation "org.grails:grails-plugin-url-mappings:$grailsVersion"
    implementation "org.grails:grails-plugin-interceptors:$grailsVersion"
    implementation "org.grails.plugins:cache:4.0.3"
    implementation "org.grails.plugins:hibernate5:7.0.5"
    implementation "org.hibernate:hibernate-core:5.4.18.Final"
    implementation "org.grails.plugins:gsp:4.0.3"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
    implementation "org.yaml:snakeyaml:1.26"
    runtimeOnly "org.glassfish.web:el-impl:2.1.2-b03"
    runtimeOnly "com.h2database:h2:1.4.200"
    runtimeOnly "org.apache.tomcat:tomcat-jdbc:9.0.37"
    runtimeOnly "javax.xml.bind:jaxb-api:2.3.1"
    runtimeOnly "com.bertramlabs.plugins:asset-pipeline-grails:3.2.4"
    runtimeOnly "org.postgresql:postgresql:42.2.18"
}

bootRun {
    ignoreExitValue true
    jvmArgs(
        '--illegal-access=warn',
        '-Dspring.output.ansi.enabled=always',
        '-Dgrails.env=development'
    )
}

tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.jvmArgs = ['-Dfile.encoding=UTF-8']
}

tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

flyway {
    url = 'jdbc:postgresql://db:5432/postgres'
    user = 'church_services_user'
    password = 'church_services_password'
    schemas = ['public']
    locations = ['filesystem:src/main/resources/db/migration']
}

build.mustRunAfter clean

sourceSets {
    main {
        groovy {
            srcDirs = ['grails-app', 'src/main/groovy']
        }
        resources {
            srcDirs = ['grails-app/conf', 'src/main/resources']
        }
    }
    main {
        resources {
            srcDirs += 'grails-app/migrations'
        }
    }
}

springBoot {
    mainClassName = 'church.services.backend.Application'
}

bootWar {
    archiveFileName = 'app.war'
}